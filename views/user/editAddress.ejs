<%- include("../partials/user/header.ejs") %>
<div class="container mt-4">
   <h3 class="mt-3" style="color: #046963; margin-bottom:70px">Edit User Address</h3>
   <form id="addressForm" method="POST" action="/editAddress?id=<%= address._id.toLocaleString() %>" class="border-0 p-3">
       <div class="row mb-50">
           <div class="form-group col-md-4">
               <label for="addressType">Address Type:</label>
               <input type="text" class="form-control border-3" value="<%= address.addresType %>" id="addressType" name="addresType" required>
           </div>
           <div class="form-group col-md-4">
               <label for="name">Name:</label>
               <input type="text" class="form-control border-3" value="<%= address.name %>" id="name" name="name" required>
           </div>
           <div class="form-group col-md-4">
               <label for="city">City:</label>
               <input type="text" class="form-control border-3" id="city" value="<%= address.city %>" name="city" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="landMark">Landmark:</label>
               <input type="text" class="form-control border-3" value="<%= address.landMark%>" id="landMark" name="landMark" required>
           </div>
           <div class="form-group col-md-4">
               <label for="state">State:</label>
               <input type="text" class="form-control border-3" value="<%= address.state %>" id="state" name="state" required>
           </div>
           <div class="form-group col-md-4">
               <label for="pincode">Pincode:</label>
               <input type="number" class="form-control border-3" value="<%= address.pincode %>" id="pincode" name="pincode" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="phone">Phone:</label>
               <input type="number" class="form-control border-3" id="phone" value="<%= address.phone %>" name="phone" required>
           </div>
           <div class="form-group col-md-4">
               <label for="altPhone">Alternate Phone:</label>
               <input type="number" class="form-control border-3" id="altPhone" value="<%= address.altPhone %>" name="altPhone" required>
           </div>
       </div>
       <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
   </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.getElementById('addressForm').addEventListener('submit', function(event) {
        if (!validateForm()) {
            event.preventDefault(); // Prevent form submission if validation fails
        }
    });

    function validateForm() {
        let isValid = true;
        const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];

        // Regular expressions for validation
        const namePattern = /^[A-Za-z]+$/; // Only letters, no spaces
        const pincodePattern = /^\d{6}$/; // Only 6-digit numbers
        const phonePattern = /^[6-9]\d{9}$/; // Only 10-digit valid Indian phone numbers (starting with 6-9)

        requiredFields.forEach(function(field) {
            const input = document.getElementById(field);
            let inputValue = input.value.trim(); // Trim spaces from input
            const errorElement = document.getElementById(field + '-error');

            if (inputValue === "") {
                showError(field, "This field is required.");
                isValid = false;
            } else {
                clearError(field);
            }
        });

        const name = document.getElementById('name').value.trim();
        const city = document.getElementById('city').value.trim();
        const landMark = document.getElementById('landMark').value.trim();
        const state = document.getElementById('state').value.trim();
        const pincode = document.getElementById('pincode').value.trim();
        const phone = document.getElementById('phone').value.trim();
        const altPhone = document.getElementById('altPhone').value.trim();

        // Name, City, Landmark & State validation (Only letters, no spaces)
        if (!namePattern.test(name)) {
            showSwalError("Name should contain only letters (no spaces or numbers).");
            isValid = false;
        }
        if (!namePattern.test(city)) {
            showSwalError("City should contain only letters (no spaces or numbers).");
            isValid = false;
        }
        if (!namePattern.test(landMark)) {
            showSwalError("Landmark should contain only letters (no spaces or numbers).");
            isValid = false;
        }
        if (!namePattern.test(state)) {
            showSwalError("State should contain only letters (no spaces or numbers).");
            isValid = false;
        }

        // Pincode validation (Only 6-digit numbers)
        if (!pincodePattern.test(pincode)) {
            showSwalError("Pincode must be exactly 6 digits (no spaces or letters).");
            isValid = false;
        }

        // Phone number validation (Only 10-digit valid numbers starting with 6-9)
        if (!phonePattern.test(phone)) {
            showSwalError("Phone number must be a valid 10-digit number starting with 6-9.");
            isValid = false;
        }
        if (!phonePattern.test(altPhone)) {
            showSwalError("Alternate phone number must be a valid 10-digit number starting with 6-9.");
            isValid = false;
        }

        // Ensure phone and alternate phone are not the same
        if (phone === altPhone) {
            showSwalError("Phone number and alternate phone number must be different.");
            isValid = false;
        }

        return isValid;
    }

    // Function to show inline error message
    function showError(field, message) {
        let errorElement = document.getElementById(field + '-error');
        if (!errorElement) {
            errorElement = document.createElement('div');
            errorElement.className = "text-danger";
            errorElement.id = field + '-error';
            document.getElementById(field).parentNode.appendChild(errorElement);
        }
        errorElement.textContent = message;
    }

    // Function to clear inline error message
    function clearError(field) {
        const errorElement = document.getElementById(field + '-error');
        if (errorElement) {
            errorElement.remove();
        }
    }

    // Function to show SweetAlert errors
    function showSwalError(message) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: message,
        });
    }
</script>

<%- include("../partials/user/footer") %>

