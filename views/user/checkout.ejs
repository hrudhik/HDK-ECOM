<%- include("../partials/user/header.ejs") %>
<style>
    .coupon {
        border: 1px solid #ccc;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
        background-color: #f9f9f9;
    }
    .coupon h3 {
        margin: 0;
        font-size: 18px;
        color: #333;
    }
    .coupon p {
        margin: 5px 0;
        color: #555;
    }
</style>
<main class="main">
  <div class="page-header breadcrumb-wrap">
    <div class="container">
      <div class="breadcrumb">
        <a href="index.html" rel="nofollow">Home</a>
        <a href="/cart"><span>Cart</span> </a>
        <span></span> Checkout
      </div>
    </div>
  </div>
  <section class="mt-50 mb-50">
    <div class="container">
      
      <div class="row">
        <div class="col-12">
          <div class="divider mt-50 mb-50"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-6">
          <div class="mb-25">
            <h4>Billing Details</h4>
          </div>
          <form method="post">
            <div class="form-group">
              <input
                type="text"
                required=""
                name="fname"
                placeholder="<%=user.name%>"
                value="<%=user.name%>"
              />
            </div>

            <div class="form-group">
              <label for="addressSelect">Select Address</label>
              <select
                id="addressSelect"
                name="selectedAddress"
                class="form-control"
                required
              >
                <% address?.address?.forEach((address) => { %>
                <option value="<%= address._id %>">
                  <%= address.name %>, <%= address.city %>, <%= address.state
                  %>, <%= address.pincode %>,<%= address.landMark %>,<%=
                  address.phone %>,<%=address.altPhone%>
                </option>
                <% }) %>
              </select>
            </div>
            <button
              type="button"
              class="btn btn-primary mt-3"
              data-bs-toggle="modal"
              data-bs-target="#addAddressModal"
            >
              Add Address
            </button>
            <button
              type="button"
              class="btn btn-secondary mt-3"
              data-bs-toggle="modal"
              data-bs-target="#editAddressModal"
            >
              Edit Address
            </button>
          </form>
        </div>

        <div class="form-group">
          <input class="w-50"
            type="text"
            
            id="couponCodeInput"
            placeholder="Enter Coupon Code..."
          />
        </div>
        <div class="form-group">
          <button id="applyCouponBtn" class="btn btn-md">Apply Coupon</button>
          <button id="removeCouponBtn" class="btn btn-md" style="display: none">
            Remove Coupon
          </button>
        </div>
        <div id="couponMessage" style="color: red; margin-top: 10px"></div>

        <div id="couponContainer" class="w-50">
            <% if (coupons.length > 0) { %>
                <% coupons.forEach(coupon => { %>
                    <div class="coupon">
                        <h3>COUPON CODE:</h3>
                        <h3 id="couponCode-<%= coupon._id %>"><%= coupon.code %></h3>
                        <p>Minimun purchase amount:<%= coupon.minPurchaseAmount %></p>
                        <p>Discount: <%= coupon.discountPercentage %>%</p>
                        <p>Expires on: <%= new Date(coupon.endDate).toLocaleDateString() %></p>
                        <button class="copy-btn" onclick="copyCode('<%= coupon._id %>')">Copy</button>
                    </div>
                <% }); %>
            <% } else { %>
                <p>No coupons available at the moment.</p>
            <% } %>
        </div>
    

        <div class="col-md-6">
          <div class="order_review">
            <div class="mb-20">
              <h4>Your Orders</h4>
            </div>
            <div class="table-responsive order_table text-center">
              <table class="table">
                <thead>
                  <tr>
                    <th colspan="2">Product</th>
                    <th>Price</th>
                  </tr>
                </thead>
                <tbody>
                  <% cart.items.forEach(item => { %>
                  <tr>
                    <td class="image product-thumbnail">
                      <img
                        src="/uploads/re-image/<%=item.productId.productImage[0]%>"
                        alt="<%= item.productId.productName %>"
                      />
                    </td>
                    <td>
                      <h5>
                        <a href="shop-product-full.html"
                          ><%= item.productId.productName %></a
                        >
                      </h5>
                      <span class="product-qty">x <%= item.quantity %></span>
                    </t d>
                    <td>₹<%= item.productId.salePrice %></td>
                    <% }) %>
                  </tr>

                  <tr>
                    <th>SubTotal</th>
                    <td class="product-subtotal" colspan="2">
                      ₹ <%= cart.items.reduce((sum, item) => sum +=
                      item.productId.salePrice * item.quantity, 0) %>
                    </td>
                  </tr>
                  <tr>
                    <th>Shipping</th>
                    <td colspan="2"><em>Free Shipping</em></td>
                  </tr>
                  <tr>
                    <th>Coupon Discount</th>
                    <td colspan="2" class="coupon-discount">
                      <span class="font-xl text-brand fw-900"
                        >₹0</span
                      >
                    </td>
                  </tr>
                  <tr>
                    <th>Total</th>
                    <td colspan="2" class="product-subtotal">
                      <span class="font-xl text-brand fw-900"
                        >₹ <%= cart.items.reduce((sum, item) => sum +=
                        item.productId.salePrice * item.quantity, 0) %></span
                      >
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div class="bt-1 border-color-1 mt-30 mb-30"></div>
            <div class="payment_method">
              <div class="mb-25">
                <h5>Payment</h5>
              </div>
              <div class="payment_option">
                <%if(cart.items.reduce((sum, item) => sum +=
                  item.productId.salePrice * item.quantity, 0) <1000){%>
                <div style="margin-bottom: 10px">
                  <input
                    id="cod"
                    type="radio"
                    name="paymentMethod"
                    value="COD"
                    style="
                      width: 15px;
                      height: 15px;
                      margin-right: 5px;
                      cursor: pointer;
                    "
                    required
                  />
                  <label for="cod" style="cursor: pointer; font-size: 14px">Cash On Delivery</label>
                </div>
                <%}else{%>
                  <div style="margin-bottom: 10px"><p class="text-danger">Cash on Delivery is only available for orders under ₹1000. </p></div>
                  <%}%>
                <div>
                  <input
                    id="paypal"
                    type="radio"
                    name="paymentMethod"
                    value="Online"
                    style="
                      width: 15px;
                      height: 15px;
                      margin-right: 5px;
                      cursor: pointer;
                    "
                    required
                  />
                  <label for="paypal" style="cursor: pointer; font-size: 14px"
                    >Razorpay</label
                  >
                </div>
                <div>
                  <input
                    id="Wallet"
                    type="radio"
                    name="paymentMethod"
                    value="Wallet"
                    style="
                      width: 15px;
                      height: 15px;
                      margin-right: 5px;
                      cursor: pointer;
                    "
                    required
                  />
                  <label for="Wallet" style="cursor: pointer; font-size: 14px"
                    >Wallet Money</label
                  >
                </div>
              </div>
            </div>
            <a class="btn btn-fill-out btn-block mt-30">Place Order</a>
          </div>
        </div>
      </div>
    </div>
  </section>
</main>

<!-- Add Address Modal -->
<div
  class="modal fade"
  id="addAddressModal"
  tabindex="-1"
  aria-labelledby="addAddressModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="addAddressForm">
        <div class="modal-header">
          <h5 class="modal-title" id="addAddressModalLabel">Add Address</h5>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"
          ></button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label for="addType">Address Type</label>
            <input
              type="text"
              class="form-control"
              id="addType"
              name="addresType"
              required
            />
          </div>
          <div class="form-group">
            <label for="addName">Name</label>
            <input
              type="text"
              class="form-control"
              id="addName"
              name="name"
              required
            />
          </div>
          <div class="form-group">
            <label for="addCity">City</label>
            <input
              type="text"
              class="form-control"
              id="addCity"
              name="city"
              required
            />
          </div>
          <div class="form-group">
            <label for="addState">State</label>
            <input
              type="text"
              class="form-control"
              id="addState"
              name="state"
              required
            />
          </div>
          <div class="form-group">
            <label for="addPincode">Pincode</label>
            <input
              type="text"
              class="form-control"
              id="addPincode"
              name="pincode"
              required
            />
          </div>
          <div class="form-group">
            <label for="addLandmark">Landmark</label>
            <input
              type="text"
              class="form-control"
              id="addLandmark"
              name="landMark"
            />
          </div>
          <div class="form-group">
            <label for="addPhone">Phone</label>
            <input
              type="text"
              class="form-control"
              id="addPhone"
              name="phone"
              required
            />
          </div>
          <div class="form-group">
            <label for="addAltPhone">Alternate Phone</label>
            <input
              type="text"
              class="form-control"
              id="addAltPhone"
              name="altPhone"
            />
          </div>
        </div>
        <div class="modal-footer">
          <button
            type="button"
            class="btn btn-secondary"
            data-bs-dismiss="modal"
          >
            Close
          </button>
          <button type="submit" class="btn btn-primary">Add Address</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit Address Modal -->
<div
  class="modal fade"
  id="editAddressModal"
  tabindex="-1"
  aria-labelledby="editAddressModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="editAddressForm">
        <div class="modal-header">
          <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"
          ></button>
        </div>
        <div class="modal-body">
          <div class="form-group">
            <label for="editName">Name</label>
            <input
              type="text"
              class="form-control"
              id="editName"
              name="name"
              required
            />
          </div>
          <div class="form-group">
            <label for="editCity">City</label>
            <input
              type="text"
              class="form-control"
              id="editCity"
              name="city"
              required
            />
          </div>
          <div class="form-group">
            <label for="editState">State</label>
            <input
              type="text"
              class="form-control"
              id="editState"
              name="state"
              required
            />
          </div>
          <div class="form-group">
            <label for="editPincode">Pincode</label>
            <input
              type="text"
              class="form-control"
              id="editPincode"
              name="pincode"
              required
            />
          </div>
          <div class="form-group">
            <label for="editLandmark">Landmark</label>
            <input
              type="text"
              class="form-control"
              id="editLandmark"
              name="landMark"
            />
          </div>
          <div class="form-group">
            <label for="editPhone">Phone</label>
            <input
              type="text"
              class="form-control"
              id="editPhone"
              name="phone"
              required
            />
          </div>
          <div class="form-group">
            <label for="editAltPhone">Alternate Phone</label>
            <input
              type="text"
              class="form-control"
              id="editAltPhone"
              name="altPhone"
            />
          </div>
        </div>
        <div class="modal-footer">
          <button
            type="button"
            class="btn btn-secondary"
            data-bs-dismiss="modal"
          >
            Close
          </button>
          <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
      </form>
    </div>
  </div>
</div>

<%- include("../partials/user/footer.ejs") %>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    function copyCode(couponId) {
            // Get the coupon code text
            const couponCodeElement = document.getElementById(`couponCode-${couponId}`);
            const couponCode = couponCodeElement.innerText;

            // Copy the coupon code to the clipboard
            navigator.clipboard.writeText(couponCode).then(() => {
                Swal.fire({
                toast: true,
                position: 'top-end',
                icon:  'success' ,
                title: `Coupon code "${couponCode}" copied to clipboard!`,
                showConfirmButton: false,
                timer: 3000,
            });
               
            }).catch(err => {
                console.error('Failed to copy text: ', err);
            });
        }


     document.getElementById("addAddressForm").addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const addressData = Object.fromEntries(formData.entries());

      try {
        const response = await fetch("/checkout/add-address", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(addressData),
        });

        const result = await response.json();
        if (response.ok) {
            const updatedAddresses = result.addresses
            reloadAddressDropdown(updatedAddresses);

            const modal = bootstrap.Modal.getInstance(document.getElementById('addAddressModal'));
      modal.hide();
//           Swal.fire({
//                   toast: true,
//                   position: 'top-end',
//                   icon:'success',
//                   title:'Address added success',
//                   showConfirmButton: true,
//                   timer: 3000,
//                    });
//           location.reload();
        } else {
          alert(result.message || "Failed to add address.");
        }
      } catch (error) {
        console.error("Error adding address:", error);
        alert("An error occurred while adding the address.");
      }
    });
    
    function reloadAddressDropdown(addresses) {
  const addressSelect = document.getElementById('addressSelect');
  addressSelect.innerHTML = ''; // Clear existing options

  addresses.forEach((address) => {
    const option = document.createElement('option');
    option.value = address._id;
    option.textContent = `${address.name}, ${address.city}, ${address.state}, ${address.pincode}, ${address.landMark}, ${address.phone}, ${address.altPhone}`;
    addressSelect.appendChild(option);
  });
}


   const placeOrderButton = document.querySelector(".btn-fill-out");
    const addressSelect = document.getElementById("addressSelect");
    const paymentRadios = document.getElementsByName("paymentMethod");
    const couponCodeInput = document.getElementById("couponCodeInput");
    let orderId
    const cartItems = JSON.parse(<%- JSON.stringify(cartItems) %>);
    const totalAmount = '<%= cart.items.reduce((sum, item) => sum + item.productId.salePrice * item.quantity, 0) %>';


    const totalElement = document.querySelector(".product-subtotal span");
    const originalTotal = parseFloat(totalElement.textContent.replace("₹", "").trim());
    // const totalAmount =originalTotal

  placeOrderButton.addEventListener("click", async (event) => {
    event.preventDefault();
    console.log("Place Order button clicked");


    const selectedAddressId = addressSelect.value;
    if (!selectedAddressId) {
      alert("Please select an address to proceed.");
      return;
    }

    const selectedPaymentMethod = Array.from(paymentRadios).find(radio => radio.checked)?.value;
    if (!selectedPaymentMethod) {
      
      Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'warning',
                title:"Please select a payment method.",
                showConfirmButton: false,
                timer:3000
               
            });
      return;
    }

    const couponCode = couponCodeInput.value.trim();
    console.log("Coupon Code:", couponCode);

    const orderData = {
      addressId: selectedAddressId,
      items: cartItems.map(item => ({
        productId: item.productId._id,
        quantity: item.quantity,
      })),
      totalAmount: totalAmount, // Use discounted total if coupon applied
      paymentMethod: selectedPaymentMethod,
      couponCode: couponCode,
    };

    try {
      const response = await fetch("/checkout/process", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(orderData),
      });

      const result = await response.json();
      if (response.ok) {
        // console.log('result',result)
        orderId=result.orderId

        if (selectedPaymentMethod === "Online") {
          
          console.log("front end paying amount :",result.totalAmount)
          const options = {
            key: "rzp_test_LbJY0AM5BiuG4B",
            amount: result.totalAmount,
            currency: "INR",
            name: "HDK Times",
            description: "Order Payment",
            order_id: result.razorpayOrderId,
            handler: async (paymentResponse) => {
      paymentResponse.orderData = orderData; // Attach the original order data
      paymentResponse.OrderId=orderId
      const verifyResponse = await fetch("/verify-payment", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(paymentResponse),
      }).then(res => res.json());

      if (verifyResponse.success) {

          Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title:"Order placed successfully!",
                showConfirmButton: false,
                timer: 3000,
            });
          window.location.href = "/paymentsuccess";
      } else {
          
          Swal.fire({
                icon: 'error' ,
                title:"Payment verification failed",
                showConfirmButton: true,
                
            });
          window.location.href = "/paymentfailer";
      }
  },

            prefill: {
              name: "Hrudhik Krihna",
              email: "hrudhikkrishna2004@gmail.com",
              contact: "6282970299",
            },
            theme: { color: "#3399cc" },
          };
          const razorpay = new Razorpay(options);
          razorpay.open();
        } else if (selectedPaymentMethod === "COD") {
         
          Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success' ,
                title:"Order placed successfully with COD!",
                showConfirmButton: false,
                timer: 3000,
            });
          window.location.href = "/userprofile";
        }else if(selectedPaymentMethod === "Wallet"){
          
          Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title:"Order Placed successfully with Wallet Money ",
                showConfirmButton: false,
                timer: 3000,
            });
          window.location.href = "/paymentsuccess";
        }
      } else {
        Swal.fire({
                toast: true,
                position: 'top-end',
                icon: data.success ? 'success' : 'error',
                title: result.message || "Failed to place order. Please try again.",
                showConfirmButton: false,
                timer: 3000,
            });
      }
    } catch (error) {
      console.error("Error placing order:", error);
      Swal.fire({
                icon: 'error',
                title:"An error occurred while placing your order. Please try again.",
                showConfirmButton: true,
                });
    }
  });

  document.addEventListener("DOMContentLoaded", () => {
    const applyCouponBtn = document.getElementById("applyCouponBtn");
    const removeCouponBtn = document.getElementById("removeCouponBtn");
    const couponCodeInput = document.getElementById("couponCodeInput");
    const couponMessage = document.getElementById("couponMessage");
    const totalElement = document.querySelector(".product-subtotal span");
    const couponfinal= document.querySelector('.coupon-discount span')
    const originalTotal = parseFloat(totalElement.textContent.replace("₹", "").trim());
    const totalAmount = '<%= cart.items.reduce((sum, item) => sum + item.productId.salePrice * item.quantity, 0) %>';

    let discountedTotal = originalTotal;

    applyCouponBtn.addEventListener("click", async () => {
      const couponCode = couponCodeInput.value.trim();


      if (!couponCode) {
        couponMessage.textContent = "Please enter a coupon code.";
        return;
      }

      try {
        const response = await fetch("/checkout/apply-coupon", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ totalAmount,couponCode}),
        });

        const result = await response.json();

        if (response.ok) {
          discountedTotal = originalTotal - result.discountAmount;
          totalElement.textContent = `₹ ${discountedTotal}`;
          couponfinal.textContent=`₹${result.discountAmount}`
          couponMessage.textContent = "Coupon applied successfully!";
          couponMessage.style.color = "green";

          // Toggle buttons
          applyCouponBtn.style.display = "none";
          removeCouponBtn.style.display = "inline-block";
          couponCodeInput.disabled = true;
        } else {
          couponMessage.textContent = result.error || "Invalid coupon code.";
          couponMessage.style.color = "red";
        }
      } catch (error) {
        console.error("Error applying coupon:", error);
        couponMessage.textContent = "An error occurred. Please try again.";
        couponMessage.style.color = "red";
      }
    });

    removeCouponBtn.addEventListener("click", () => {
      discountedTotal = originalTotal;
      totalElement.textContent = `₹ ${originalTotal}`;
      couponfinal.textContent=`₹0`
      couponMessage.textContent = "";

      // Toggle buttons
      applyCouponBtn.style.display = "inline-block";
      removeCouponBtn.style.display = "none";
      couponCodeInput.disabled = false;
      couponCodeInput.value = "";
    });
  });
</script>
